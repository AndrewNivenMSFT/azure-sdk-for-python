# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import SdkJSONEncoder, _deserialize
from ...operations._operations import (
    build_location_interface_verify_request,
    build_networks_retrieve_request,
    build_number_interface_retrieve_request,
    build_number_interface_verify_request,
    build_sim_swap_interface_retrieve_request,
    build_sim_swap_interface_verify_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class LocationInterfaceOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmableconnectivity.aio.ProgrammableConnectivityClient`'s
        :attr:`location_interface` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def verify(
        self,
        body: _models.LocationVerifyRequest,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.LocationVerifyResponse:
        # pylint: disable=line-too-long
        """Verifies whether a device is within a specified location area, defined as an accuracy (radius)
        around a point, specified by longitude and latitude.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.LocationVerifyRequest
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: LocationVerifyResponse. The LocationVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.LocationVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "accuracy": 0,  # Accuracy expected for location verification in kilometers.
                      Required.
                    "latitude": 0.0,  # Latitude of location to be verified. Required.
                    "locationDevice": {
                        "ipv4Address": {
                            "ipv4": "str",  # IPv4 address may be specified in form
                              <address/mask> as:  .. code-block::           - address - an IPv4 number
                              in dotted-quad form 1.2.3.4. Only this exact IP number will match the
                              flow control rule.          - address/mask - an IP number as above with a
                              mask width of the form 1.2.3.4/24.            In this case, all IP
                              numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid
                              for the IP version. Required.
                            "port": 0  # User equipment port. Required.
                        },
                        "ipv6Address": {
                            "ipv6": "str",  # IPv6 address, following IETF 5952 format,
                              may be specified in form <address/mask> as:  .. code-block::           -
                              address - The /128 subnet is optional for single addresses:            -
                              2001:db8:85a3:8d3:1319:8a2e:370:7344            -
                              2001:db8:85a3:8d3:1319:8a2e:370:7344/128          - address/mask - an IP
                              v6 number with a mask:            - 2001:db8:85a3:8d3::0/64            -
                              2001:db8:85a3:8d3::/64. Required.
                            "port": 0  # User equipment port. Required.
                        },
                        "networkAccessIdentifier": "str",  # Optional. External identifier or
                          network access identifier of the device.
                        "phoneNumber": "str"  # Optional. Phone number in E.164 format
                          (starting with country code), and optionally prefixed with '+'.
                    },
                    "longitude": 0.0,  # Longitude of location to be verified. Required.
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier in a format matching
                          the type above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a
                          device in IETF 5952 format. * NetworkCode matching our documentation or an
                          output from /Network:retrieve.". Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the location is verified, False otherwise.
                      Required.
                }
        """

    @overload
    async def verify(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.LocationVerifyResponse:
        """Verifies whether a device is within a specified location area, defined as an accuracy (radius)
        around a point, specified by longitude and latitude.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: LocationVerifyResponse. The LocationVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.LocationVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the location is verified, False otherwise.
                      Required.
                }
        """

    @overload
    async def verify(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.LocationVerifyResponse:
        """Verifies whether a device is within a specified location area, defined as an accuracy (radius)
        around a point, specified by longitude and latitude.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: LocationVerifyResponse. The LocationVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.LocationVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the location is verified, False otherwise.
                      Required.
                }
        """

    @distributed_trace_async
    async def verify(
        self, body: Union[_models.LocationVerifyRequest, JSON, IO[bytes]], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.LocationVerifyResponse:
        # pylint: disable=line-too-long
        """Verifies whether a device is within a specified location area, defined as an accuracy (radius)
        around a point, specified by longitude and latitude.

        :param body: Is one of the following types: LocationVerifyRequest, JSON, IO[bytes] Required.
        :type body: ~azure.programmableconnectivity.models.LocationVerifyRequest or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: LocationVerifyResponse. The LocationVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.LocationVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "accuracy": 0,  # Accuracy expected for location verification in kilometers.
                      Required.
                    "latitude": 0.0,  # Latitude of location to be verified. Required.
                    "locationDevice": {
                        "ipv4Address": {
                            "ipv4": "str",  # IPv4 address may be specified in form
                              <address/mask> as:  .. code-block::           - address - an IPv4 number
                              in dotted-quad form 1.2.3.4. Only this exact IP number will match the
                              flow control rule.          - address/mask - an IP number as above with a
                              mask width of the form 1.2.3.4/24.            In this case, all IP
                              numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid
                              for the IP version. Required.
                            "port": 0  # User equipment port. Required.
                        },
                        "ipv6Address": {
                            "ipv6": "str",  # IPv6 address, following IETF 5952 format,
                              may be specified in form <address/mask> as:  .. code-block::           -
                              address - The /128 subnet is optional for single addresses:            -
                              2001:db8:85a3:8d3:1319:8a2e:370:7344            -
                              2001:db8:85a3:8d3:1319:8a2e:370:7344/128          - address/mask - an IP
                              v6 number with a mask:            - 2001:db8:85a3:8d3::0/64            -
                              2001:db8:85a3:8d3::/64. Required.
                            "port": 0  # User equipment port. Required.
                        },
                        "networkAccessIdentifier": "str",  # Optional. External identifier or
                          network access identifier of the device.
                        "phoneNumber": "str"  # Optional. Phone number in E.164 format
                          (starting with country code), and optionally prefixed with '+'.
                    },
                    "longitude": 0.0,  # Longitude of location to be verified. Required.
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier in a format matching
                          the type above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a
                          device in IETF 5952 format. * NetworkCode matching our documentation or an
                          output from /Network:retrieve.". Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the location is verified, False otherwise.
                      Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.LocationVerifyResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_location_interface_verify_request(
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApcErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.LocationVerifyResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class NetworksOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmableconnectivity.aio.ProgrammableConnectivityClient`'s
        :attr:`networks` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def retrieve(
        self,
        body: _models.DeviceNetworkIdentifier,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Network:
        # pylint: disable=line-too-long
        """Retrieves the network a given device is on. Returns network in a networkCode format that can be
        used for other APIs.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.DeviceNetworkIdentifier
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Network. The Network is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.Network
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "deviceIdentifier": "str",  # The device identifier in a format matching the
                      type above:   * IPv4 in dotted-quad format. * IPV6 in IETF 5952 format. Required.
                    "identifierType": "str"  # The type of device identifier given: 'IPv4' or
                      'IPv6'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "networkCode": "str"  # The identifier for the network. This can be used as
                      the networkIdentifier for the service APIs. Required.
                }
        """

    @overload
    async def retrieve(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Network:
        # pylint: disable=line-too-long
        """Retrieves the network a given device is on. Returns network in a networkCode format that can be
        used for other APIs.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Network. The Network is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.Network
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "networkCode": "str"  # The identifier for the network. This can be used as
                      the networkIdentifier for the service APIs. Required.
                }
        """

    @overload
    async def retrieve(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Network:
        # pylint: disable=line-too-long
        """Retrieves the network a given device is on. Returns network in a networkCode format that can be
        used for other APIs.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Network. The Network is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.Network
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "networkCode": "str"  # The identifier for the network. This can be used as
                      the networkIdentifier for the service APIs. Required.
                }
        """

    @distributed_trace_async
    async def retrieve(
        self, body: Union[_models.DeviceNetworkIdentifier, JSON, IO[bytes]], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.Network:
        # pylint: disable=line-too-long
        """Retrieves the network a given device is on. Returns network in a networkCode format that can be
        used for other APIs.

        :param body: Is one of the following types: DeviceNetworkIdentifier, JSON, IO[bytes] Required.
        :type body: ~azure.programmableconnectivity.models.DeviceNetworkIdentifier or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: Network. The Network is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.Network
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "deviceIdentifier": "str",  # The device identifier in a format matching the
                      type above:   * IPv4 in dotted-quad format. * IPV6 in IETF 5952 format. Required.
                    "identifierType": "str"  # The type of device identifier given: 'IPv4' or
                      'IPv6'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "networkCode": "str"  # The identifier for the network. This can be used as
                      the networkIdentifier for the service APIs. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Network] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_networks_retrieve_request(
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApcErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Network, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class NumberInterfaceOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmableconnectivity.aio.ProgrammableConnectivityClient`'s
        :attr:`number_interface` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def verify(
        self,
        body: _models.NumberVerifyRequest,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.NumberVerifyResponse:
        # pylint: disable=line-too-long
        """Verifies the phone number (MSISDN) associated with a device.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.NumberVerifyRequest
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberVerifyResponse. The NumberVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier in a format matching
                          the type above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a
                          device in IETF 5952 format. * NetworkCode matching our documentation or an
                          output from /Network:retrieve.". Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "hashedPhoneNumber": "str",  # Optional. Hashed phone number. SHA-256 (in
                      hexadecimal representation) of the mobile phone number in **E.164 format
                      (starting with country code)**. Optionally prefixed with '+'.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if number is verified, False otherwise. Required.
                }
        """

    @overload
    async def verify(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.NumberVerifyResponse:
        """Verifies the phone number (MSISDN) associated with a device.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberVerifyResponse. The NumberVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if number is verified, False otherwise. Required.
                }
        """

    @overload
    async def verify(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.NumberVerifyResponse:
        """Verifies the phone number (MSISDN) associated with a device.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberVerifyResponse. The NumberVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if number is verified, False otherwise. Required.
                }
        """

    @distributed_trace_async
    async def verify(
        self, body: Union[_models.NumberVerifyRequest, JSON, IO[bytes]], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.NumberVerifyResponse:
        # pylint: disable=line-too-long
        """Verifies the phone number (MSISDN) associated with a device.

        :param body: Is one of the following types: NumberVerifyRequest, JSON, IO[bytes] Required.
        :type body: ~azure.programmableconnectivity.models.NumberVerifyRequest or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberVerifyResponse. The NumberVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier in a format matching
                          the type above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a
                          device in IETF 5952 format. * NetworkCode matching our documentation or an
                          output from /Network:retrieve.". Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "hashedPhoneNumber": "str",  # Optional. Hashed phone number. SHA-256 (in
                      hexadecimal representation) of the mobile phone number in **E.164 format
                      (starting with country code)**. Optionally prefixed with '+'.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if number is verified, False otherwise. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.NumberVerifyResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_number_interface_verify_request(
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApcErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.NumberVerifyResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def retrieve(
        self,
        body: _models.NetworkIdentifier,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.NumberRetrieveResponse:
        # pylint: disable=line-too-long
        """Retrieves the phone number (MSISDN) associated with a device.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.NetworkIdentifier
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberRetrieveResponse. The NumberRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "identifier": "str",  # The network identifier in a format matching the type
                      above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a device in
                      IETF 5952 format. * NetworkCode matching our documentation or an output from
                      /Network:retrieve.". Required.
                    "identifierType": "str"  # The type of identifier for the network. one of:
                      'IPv4', 'IPv6', 'NetworkCode'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }
        """

    @overload
    async def retrieve(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.NumberRetrieveResponse:
        # pylint: disable=line-too-long
        """Retrieves the phone number (MSISDN) associated with a device.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberRetrieveResponse. The NumberRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }
        """

    @overload
    async def retrieve(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.NumberRetrieveResponse:
        # pylint: disable=line-too-long
        """Retrieves the phone number (MSISDN) associated with a device.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberRetrieveResponse. The NumberRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }
        """

    @distributed_trace_async
    async def retrieve(
        self, body: Union[_models.NetworkIdentifier, JSON, IO[bytes]], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.NumberRetrieveResponse:
        # pylint: disable=line-too-long
        """Retrieves the phone number (MSISDN) associated with a device.

        :param body: Is one of the following types: NetworkIdentifier, JSON, IO[bytes] Required.
        :type body: ~azure.programmableconnectivity.models.NetworkIdentifier or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: NumberRetrieveResponse. The NumberRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "identifier": "str",  # The network identifier in a format matching the type
                      above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a device in
                      IETF 5952 format. * NetworkCode matching our documentation or an output from
                      /Network:retrieve.". Required.
                    "identifierType": "str"  # The type of identifier for the network. one of:
                      'IPv4', 'IPv6', 'NetworkCode'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.NumberRetrieveResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_number_interface_retrieve_request(
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApcErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.NumberRetrieveResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class SimSwapInterfaceOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmableconnectivity.aio.ProgrammableConnectivityClient`'s
        :attr:`sim_swap_interface` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def retrieve(
        self,
        body: _models.SimSwapRetrieveRequest,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapRetrieveResponse:
        # pylint: disable=line-too-long
        """Provides timestamp of latest SIM swap.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.SimSwapRetrieveRequest
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapRetrieveResponse. The SimSwapRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier in a format matching
                          the type above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a
                          device in IETF 5952 format. * NetworkCode matching our documentation or an
                          output from /Network:retrieve.". Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Datetime of most recent swap for SIM.
                      Required.
                }
        """

    @overload
    async def retrieve(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SimSwapRetrieveResponse:
        """Provides timestamp of latest SIM swap.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapRetrieveResponse. The SimSwapRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Datetime of most recent swap for SIM.
                      Required.
                }
        """

    @overload
    async def retrieve(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SimSwapRetrieveResponse:
        """Provides timestamp of latest SIM swap.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapRetrieveResponse. The SimSwapRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Datetime of most recent swap for SIM.
                      Required.
                }
        """

    @distributed_trace_async
    async def retrieve(
        self, body: Union[_models.SimSwapRetrieveRequest, JSON, IO[bytes]], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.SimSwapRetrieveResponse:
        # pylint: disable=line-too-long
        """Provides timestamp of latest SIM swap.

        :param body: Is one of the following types: SimSwapRetrieveRequest, JSON, IO[bytes] Required.
        :type body: ~azure.programmableconnectivity.models.SimSwapRetrieveRequest or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapRetrieveResponse. The SimSwapRetrieveResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapRetrieveResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier in a format matching
                          the type above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a
                          device in IETF 5952 format. * NetworkCode matching our documentation or an
                          output from /Network:retrieve.". Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "phoneNumber": "str"  # Phone number in E.164 format (starting with country
                      code), and optionally prefixed with '+'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Datetime of most recent swap for SIM.
                      Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SimSwapRetrieveResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_sim_swap_interface_retrieve_request(
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApcErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SimSwapRetrieveResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def verify(
        self,
        body: _models.SimSwapVerifyRequest,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapVerifyResponse:
        # pylint: disable=line-too-long
        """Verifies if a SIM swap has been performed during a past period (defined in the request with
        'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.SimSwapVerifyRequest
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapVerifyResponse. The SimSwapVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier in a format matching
                          the type above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a
                          device in IETF 5952 format. * NetworkCode matching our documentation or an
                          output from /Network:retrieve.". Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "maxAgeHours": 0  # Optional. Maximum lookback for SimSwap verification.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the SIM has swapped in the specified period,
                      False otherwise. Required.
                }
        """

    @overload
    async def verify(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SimSwapVerifyResponse:
        """Verifies if a SIM swap has been performed during a past period (defined in the request with
        'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapVerifyResponse. The SimSwapVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the SIM has swapped in the specified period,
                      False otherwise. Required.
                }
        """

    @overload
    async def verify(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SimSwapVerifyResponse:
        """Verifies if a SIM swap has been performed during a past period (defined in the request with
        'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapVerifyResponse. The SimSwapVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the SIM has swapped in the specified period,
                      False otherwise. Required.
                }
        """

    @distributed_trace_async
    async def verify(
        self, body: Union[_models.SimSwapVerifyRequest, JSON, IO[bytes]], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.SimSwapVerifyResponse:
        # pylint: disable=line-too-long
        """Verifies if a SIM swap has been performed during a past period (defined in the request with
        'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.

        :param body: Is one of the following types: SimSwapVerifyRequest, JSON, IO[bytes] Required.
        :type body: ~azure.programmableconnectivity.models.SimSwapVerifyRequest or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: SimSwapVerifyResponse. The SimSwapVerifyResponse is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapVerifyResponse
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier in a format matching
                          the type above:   * IPv4 of a device in dotted-quad form 1.2.3.4. * IPv6 of a
                          device in IETF 5952 format. * NetworkCode matching our documentation or an
                          output from /Network:retrieve.". Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "maxAgeHours": 0  # Optional. Maximum lookback for SimSwap verification.
                }

                # response body for status code(s): 200
                response == {
                    "verified": bool  # True if the SIM has swapped in the specified period,
                      False otherwise. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SimSwapVerifyResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_sim_swap_interface_verify_request(
            apc_gateway_id=apc_gateway_id,
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = _deserialize(_models.ApcErrorResponse, response.json())
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SimSwapVerifyResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore
